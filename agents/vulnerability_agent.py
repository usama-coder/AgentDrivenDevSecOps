from chains.scan_chain import scan_chain
from chains.remediation_chain import run_remediation_chain
import subprocess


def get_modified_files():

    result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'], capture_output=True, text=True)
    files = result.stdout.splitlines()
    modified_files = [f for f in files if f.endswith('.py')]  # Only include Python files
    return modified_files


def handle_vulnerability():

    # Get the list of modified Python files
    modified_files = get_modified_files()

    if modified_files:
        print(f"Modified files: {modified_files}")
        # Run the scan on modified files only
        report = scan_chain(modified_files)

        for issue in report['issues']:
            vulnerable_code = issue.get('code', "Code snippet not provided")
            vulnerability_description = issue.get('issue_text', "Description not provided")

            print(f"Vulnerability: {vulnerability_description}")

            # Run the remediation chain on each vulnerable code snippet
            remediation = run_remediation_chain(vulnerable_code)

            print("Vulnerable Code:")
            print(vulnerable_code)
            print("\nRecommended Fix:")
            print(remediation)
            print("\n" + "-" * 40 + "\n")
    else:
        print("No modified Python files to scan.")

