from chains.scan_chain import scan_chain
from chains.remediation_chain import run_remediation_chain
import subprocess
from important_files import IMPORTANT_EXTENSIONS
import requests
import os


GITHUB_TOKEN = "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"
REPO_OWNER = "usamacgi"
REPO_NAME = "DevSecOps"

def get_pr_files():
    pr_number=os.getenv("PR_NUMBER")
    #pr_number=3
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/pulls/{pr_number}/files"
    headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        files = [file["filename"] for file in response.json()]
        return files
    else:
        print(f"Error fetching PR files: {response.status_code}, {response.text}")
        return []

def get_modified_files():
    # Use git diff to list modified files between the last two commits
    result = subprocess.run(['git', 'diff', '--name-only', 'HEAD^'], capture_output=True, text=True)
    files = result.stdout.splitlines()
    # Filter only Python files
    modified_files =  [f for f in files if f.endswith(IMPORTANT_EXTENSIONS) or f in IMPORTANT_EXTENSIONS]

    print(f"Modified files: {modified_files}")
    return modified_files


def generate_markdown_report(issues):
    total_issues = len(issues)

    # Initialize report with a header
    report = "# Code Vulnerabilities Report\n\n"
    report += f"## Total Vulnerabilities Detected: **{total_issues}**\n\n"
    report += "---\n\n"

    for issue in issues:
        # Run LLM remediation chain to get the vulnerabilities and recommendations
        remediation = run_remediation_chain(issue['description'])

        # Split each section of remediation by the correct separator
        sections = remediation.split("----------------------------------------")
        for section in sections:
            # Skip empty sections
            if not section.strip():
                continue

            # Convert the section to lowercase for case-insensitive matching
            lower_section = section.lower()

            # Check for the "recommended fix" in the section
            if "recommended fix:" in lower_section:
                # Extract the Vulnerable Code
                if "vulnerable code:" in lower_section:
                    vulnerable_code_start = lower_section.find("vulnerable code:") + len("vulnerable code:")
                    recommended_fix_start = lower_section.find("recommended fix:")
                    vulnerable_code = section[vulnerable_code_start:recommended_fix_start].strip()
                else:
                    vulnerable_code = "No vulnerable code provided."

                # Extract the Recommended Fix and Description
                recommended_fix_start = lower_section.find("recommended fix:") + len("recommended fix:")
                if "recommended fix description:" in lower_section:
                    description_start = lower_section.find("recommended fix description:")
                    recommended_fix_code = section[recommended_fix_start:description_start].strip()
                    recommendation_description = section[description_start + len("recommended fix description:"):].strip()
                else:
                    recommended_fix_code = section[recommended_fix_start:].strip()
                    recommendation_description = "No additional description provided."

                # Clean up code block delimiters in vulnerable and fix code sections
                vulnerable_code = vulnerable_code.replace("```python", "").replace("```", "").strip()
                recommended_fix_code = recommended_fix_code.replace("```python", "").replace("```", "").strip()
                recommendation_description = recommendation_description.strip()

                # Add the section to the report
                report += f"### File: {issue['file']}, Line: {issue['line']}\n"
                report += f"**Description**: {issue['description']}\n\n"
                report += f"**Severity**: {issue['severity']}\n\n"

                # Display the vulnerable code
                report += "#### Vulnerable Code\n"
                report += "```python\n"
                report += f"{vulnerable_code}\n"
                report += "```\n\n"

                # Display the recommended fix code
                report += "#### Recommended Fix Code\n"
                report += "```python\n"
                report += f"{recommended_fix_code}\n"
                report += "```\n\n"

                # Display the recommendation description
                report += "#### Recommendation Description\n"
                report += f"{recommendation_description}\n\n"

                report += "----------------------------------------\n\n"

    with open("vulnerability_report.md", "w") as f:
        f.write(report)



def handle_vulnerability():

    modified_files = get_pr_files()
    if modified_files:
        print(f"Scanning modified files: {modified_files}")
        issues = scan_chain(modified_files)
        print (issues)
        return issues
    else:
        print("No modified Python files to scan.")
        return {"issues": []}