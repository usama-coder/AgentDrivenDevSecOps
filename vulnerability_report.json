[
    {
        "file": "agents/vulnerability_agent.py",
        "line": 3,
        "description": "Consider possible security implications associated with the subprocess module.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "agents/vulnerability_agent.py",
        "line": 8,
        "description": "Starting a process with a partial executable path",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "agents/vulnerability_agent.py",
        "line": 8,
        "description": "subprocess call - check for execution of untrusted input.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 2,
        "description": "Consider possible security implications associated with the subprocess module.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 9,
        "description": "Starting a process with a partial executable path",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 9,
        "description": "subprocess call - check for execution of untrusted input.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 44,
        "description": "Starting a process with a partial executable path",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 44,
        "description": "subprocess call - check for execution of untrusted input.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 86,
        "description": "Starting a process with a partial executable path",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 86,
        "description": "subprocess call - check for execution of untrusted input.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 161,
        "description": "Starting a process with a partial executable path",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "chains/scan_chain.py",
        "line": 161,
        "description": "subprocess call - check for execution of untrusted input.",
        "severity": "LOW",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "flask - Flask 2.2.5 and 2.3.2 include a fix for CVE-2023-30861: When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by the proxy to other clients. If the proxy also caches 'Set-Cookie' headers, it may send one client's 'session' cookie to other clients. The severity depends on the application's use of the session and the proxy's behavior regarding cookies. The risk depends on all these conditions being met:",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "sqlalchemy - Sqlalchemy 2.0.0b1 avoids leaking cleartext passwords to the open for careless uses of str(engine.URL()) in logs and prints.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Werkzeug 2.2.3 includes a fix for CVE-2023-23934: Browsers may allow \"nameless\" cookies that look like '=value' instead of 'key=value'. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like '=__Host-test=bad' for another subdomain. Werkzeug prior to 2.2.3 will parse the cookie '=__Host-test=bad' as __Host-test=bad'. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Werkzeug 2.2.3 includes a fix for CVE-2023-25577: Prior to version 2.2.3, Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses 'request.data', 'request.form', 'request.files', or 'request.get_data(parse_form_data=False)', it can cause unexpectedly high resource usage. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Werkzeug 3.0.1 and 2.3.8 include a security fix: Slow multipart parsing for large parts potentially enabling DoS attacks.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Werkzeug is a comprehensive WSGI web application library. The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Affected versions of Werkzeug are vulnerable to Path Traversal (CWE-22) on Windows systems running Python versions below 3.11. The safe_join() function failed to properly detect certain absolute paths on Windows, allowing attackers to potentially access files outside the intended directory. An attacker could craft special paths starting with \"/\" that bypass the directory restrictions on Windows systems. The vulnerability exists in the safe_join() function which relied solely on os.path.isabs() for path validation. This is exploitable on Windows systems by passing paths starting with \"/\" to safe_join(). To remediate, upgrade to the latest version which includes additional path validation checks.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Affected versions of Werkzeug are potentially vulnerable to resource exhaustion when parsing file data in forms. Applications using 'werkzeug.formparser.MultiPartParser' to parse 'multipart/form-data' requests (e.g. all flask applications) are vulnerable to a relatively simple but effective resource exhaustion (denial of service) attack. A specifically crafted form submission request can cause the parser to allocate and block 3 to 8 times the upload size in main memory. There is no upper limit; a single upload at 1 Gbit/s can exhaust 32 GB of RAM in less than 60 seconds.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "werkzeug - Werkzeug is a comprehensive WSGI web application library. If an upload of a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer. This allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "aiohttp - Affected versions of aiohttp are vulnerable to Middleware Cache Pollution. This vulnerability allows attackers to potentially interfere with middleware handling by exploiting cached middleware associated with system routes. The impact includes possible bypassing of security middleware or unintended access to internal routes. The attack vector involves crafting requests that target system routes, causing the middleware cache to store and reuse inappropriate middleware configurations. The vulnerable methods are _build_middlewares and the middleware caching mechanism in web_app.py. To mitigate, upgrade to aiohttp version, which prevents system routes from polluting the middleware cache by excluding SystemRoute instances from caching.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "aiohttp - Affected versions of aiohttp are vulnerable to HTTP Request Smuggling (CWE-444). This vulnerability allows attackers to inject malicious HTTP messages by including line feeds (LF) in chunk extensions, potentially bypassing security controls and executing unauthorized actions. The attack vector involves sending specially crafted chunked HTTP requests to exploit the improper parsing in the HttpPayloadParser class. To mitigate, upgrade to aiohttp version which validates chunk extensions by rejecting any containing unexpected LFs, thereby preventing request smuggling attacks.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "bandit - Bandit 1.7.7 identifies the str.replace method as a potential risk for SQL injection because it can be misused in constructing SQL queries, potentially enabling the execution of arbitrary SQL code.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "jinja2 - A vulnerability in the Jinja compiler allows an attacker who can control both the content and filename of a template to execute arbitrary Python code, bypassing Jinja's sandbox protections. To exploit this vulnerability, an attacker must have the ability to manipulate both the template's filename and its contents. The risk depends on the application's specific use case. This issue affects applications that render untrusted templates where the attacker can determine the template filename, potentially leading to severe security breaches.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.225 includes a fix for an arbitrary code execution vulnerability in JIRA API wrapper.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - An issue in Harrison Chase langchain v.0.0.194 and before allows a remote attacker to execute arbitrary code via the from_math_prompt and from_colored_object_prompt functions.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.236 includes a fix for an Arbitrary Code Execution vulnerability. In affected versions, the vulnerability allows an attacker to execute arbitrary code via the Python exec calls in the PALChain.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.236 includes a fix for an Arbitrary Code Execution vulnerability. The vulnerability allows a remote attacker to execute arbitrary code via the PALChain parameter in the Python exec method.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.247 includes a fix for CVE-2023-36189: SQL injection vulnerability allows a remote attacker to obtain sensitive information via the SQLDatabaseChain component.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.247 includes a fix for CVE-2023-34541: Arbitrary code execution in load_prompt.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Affected versions of Langchain allow an attacker to execute arbitrary code via the PALChain in the python exec method. The PALChain class requires unique security considerations so it was moved langchain-experimental package and removed from langchain on version 0.0.247. The issue was attempted to be resolved several times in langchain-experimental but the fixes were found incomplete. See CVE-2023-44467, CVE-2024-27444, and CVE-2024-38459.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.306 includes a fix for a code injection vulnerability.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - An issue in langchain v.0.0.171 allows a remote attacker to execute arbitrary code via the via the a json file to the load_prompt parameter. This is related to __subclasses__ or a template.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - LangChain before 0.0.317 allows SSRF via document_loaders/recursive_url_loader.py because crawling can proceed from an external server to an internal server.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Affected versions of langchain allow a remote attacker to execute arbitrary code via a crafted script to the PythonAstREPLTool._run component.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain 0.0.329 includes a fix for CVE-2023-32786: Server-Side Request Forgery vulnerability.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - langchain-ai/langchain is vulnerable to path traversal due to improper limitation of a pathname to a restricted directory ('Path Traversal') in its LocalFileStore functionality. An attacker can leverage this vulnerability to read or write files anywhere on the filesystem, potentially leading to information disclosure or remote code execution. The issue lies in the handling of file paths in the mset and mget methods, where user-supplied input is not adequately sanitized, allowing directory traversal sequences to reach unintended directories.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - In versions of Langchain-ai before 0.1.0, a vulnerability exists where a crawler, using a specified configuration, could mistakenly download malicious content from an external site. This occurs when an attacker adds a malicious HTML file on https://example.com that includes links to outside sites, contrary to the crawler's settings intended to restrict such actions.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain addresses path traversal vulnerability CVE-2024-28088 by deprecating certain functionality in its recursive URL loader, enhancing security against unsanitized user input exploitation.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchain version 0.1.14 addresses CVE-2024-21503, updating the \"black\" python linter from version 24.2.0 to 24.3.0. This update remedies a Regex-related denial of service vulnerability present in the earlier version.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - langchain_experimental (aka LangChain Experimental) in LangChain before 0.1.8 allows an attacker to bypass the CVE-2023-44467 fix and execute arbitrary code via the __import__, __subclasses__, __builtins__, __globals__, __getattribute__, __bases__, __mro__, or __base__ attribute in Python code. These are not prohibited by pal_chain/base.py. See CVE-2024-27444.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - An issue in LangChain v.0.0.231 allows a remote attacker to execute arbitrary code via the prompt parameter.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - An issue in LanChain-ai Langchain v.0.0.245 allows a remote attacker to execute arbitrary code via the evaluate function in the numexpr library.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "langchain - Langchains 0.1.14 updates its dependency 'langchain-core' in poetry.lock to version 0.1.37 to include a fix for a XML Entity Expansion vulnerability.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "peewee - Peewee 3.17.1 introduces enhancements to address a race condition issue by implementing stricter locking mechanisms around pool connection management.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "pip - Pip solves a security vulnerability that previously allowed maliciously crafted wheel files to execute unauthorized code during installation.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "safety - Safety 2.2.0 updates its dependency 'dparse' to include a security fix.",
        "severity": "HIGH",
        "status": "Open"
    },
    {
        "file": "requirements.txt",
        "line": 1,
        "description": "setuptools - Affected versions of Setuptools allow for remote code execution via its download functions. These functions, which are used to download packages from URLs provided by users or retrieved from package index servers, are susceptible to code injection. If these functions are exposed to user-controlled inputs, such as package URLs, they can execute arbitrary commands on the system.",
        "severity": "HIGH",
        "status": "Open"
    }
]